#include "trig.h"
#include <cmath>
#include <cstdio>

/*
 * The number of bits of our data type: here 16 (sizeof operator returns bytes).
 */
const constexpr int32_t INT32_BITS = 8 * sizeof(int32_t);
#ifndef INT32_MAX
    const constexpr INT32_MAX = ((1<<(INT32_BITS-1))-1);
#endif

const constexpr int32_t INT32_OVERFLOW = 2147483648;
const constexpr double Q15 = 1.0 / (double)INT32_MAX;

/*
 * "10 bit" large table = 1024 values. The mask: all bit belonging to the table
 * are 1, the all above 0.
 */
const constexpr int32_t TABLE_BITS = 10;
const constexpr int32_t TABLE_SIZE = 1 << TABLE_BITS;
const constexpr int32_t TABLE_MASK = TABLE_SIZE - 1;
 
/*
 * The lookup table is to 90DEG, the input can be -360 to 360 DEG, where negative
 * values are transformed to positive before further processing. We need two
 * additional bits (*4) to represent 360 DEG:
 */
const constexpr int32_t LOOKUP_BITS = TABLE_BITS + 2;
const constexpr int32_t LOOKUP_MASK = (1 << LOOKUP_BITS) - 1;
const constexpr int32_t FLIP_BIT =    1 << TABLE_BITS;
const constexpr int32_t NEGATE_BIT =  1 << (TABLE_BITS + 1);
const constexpr int32_t INTERP_BITS = INT32_BITS - 1 - LOOKUP_BITS;
const constexpr int32_t INTERP_MASK = (1 << INTERP_BITS) - 1;


static int32_t sin90[TABLE_SIZE+1] = {
    0x0000,0x3243f5,0x6487e2,0x96cbc1,0xc90f87,0xfb532f,0x12d96b0,0x15fda03,
    0x1921d1f,0x1c45ffe,0x1f6a296,0x228e4e1,0x25b26d7,0x28d6870,0x2bfa9a4,0x2f1ea6b,
    0x3242abe,0x3566a96,0x388a9e9,0x3bae8b1,0x3ed26e6,0x41f647f,0x451a176,0x483ddc3,
    0x4b6195d,0x4e8543d,0x51a8e5b,0x54cc7b0,0x57f0034,0x5b137df,0x5e36ea9,0x615a48a,
    0x647d97c,0x67a0d75,0x6ac406f,0x6de7261,0x710a344,0x742d310,0x77501be,0x7a72f45,
    0x7d95b9e,0x80b86c1,0x83db0a7,0x86fd947,0x8a2009a,0x8d42698,0x9064b3a,0x9386e77,
    0x96a9049,0x99cb0a7,0x9cecf89,0xa00ece8,0xa3308bc,0xa6522fd,0xa973ba5,0xac952aa,
    0xafb6805,0xb2d7bae,0xb5f8d9f,0xb919dce,0xbc3ac35,0xbf5b8cb,0xc27c389,0xc59cc67,
    0xc8bd35d,0xcbdd865,0xcefdb75,0xd21dc86,0xd53db92,0xd85d88e,0xdb7d376,0xde9cc3f,
    0xe1bc2e3,0xe4db75a,0xe7fa99d,0xeb199a3,0xee38765,0xf1572dc,0xf475bfe,0xf7942c6,
    0xfab272b,0xfdd0925,0x100ee8ad,0x1040c5bb,0x1072a047,0x10a4784a,0x10d64dbc,0x11082095,
    0x1139f0ce,0x116bbe5f,0x119d8940,0x11cf516a,0x120116d4,0x1232d978,0x1264994d,0x1296564d,
    0x12c8106e,0x12f9c7aa,0x132b7bf9,0x135d2d53,0x138edbb0,0x13c0870a,0x13f22f57,0x1423d491,
    0x145576b1,0x148715ad,0x14b8b17f,0x14ea4a1f,0x151bdf85,0x154d71aa,0x157f0086,0x15b08c11,
    0x15e21444,0x16139917,0x16451a82,0x1676987f,0x16a81304,0x16d98a0b,0x170afd8c,0x173c6d80,
    0x176dd9de,0x179f429f,0x17d0a7bb,0x1802092b,0x183366e8,0x1864c0e9,0x18961727,0x18c7699b,
    0x18f8b83c,0x192a0303,0x195b49e9,0x198c8ce6,0x19bdcbf2,0x19ef0706,0x1a203e1a,0x1a517127,
    0x1a82a025,0x1ab3cb0c,0x1ae4f1d5,0x1b161479,0x1b4732ef,0x1b784d30,0x1ba96334,0x1bda74f5,
    0x1c0b826a,0x1c3c8b8c,0x1c6d9053,0x1c9e90b7,0x1ccf8cb2,0x1d00843c,0x1d31774c,0x1d6265dd,
    0x1d934fe5,0x1dc4355d,0x1df5163e,0x1e25f281,0x1e56ca1d,0x1e879d0c,0x1eb86b45,0x1ee934c2,
    0x1f19f97a,0x1f4ab967,0x1f7b7480,0x1fac2abe,0x1fdcdc1a,0x200d888c,0x203e300d,0x206ed294,
    0x209f701c,0x20d0089b,0x21009c0b,0x21312a64,0x2161b39f,0x219237b4,0x21c2b69b,0x21f3304e,
    0x2223a4c5,0x225413f7,0x22847ddf,0x22b4e274,0x22e541ae,0x23159b87,0x2345eff7,0x23763ef6,
    0x23a6887e,0x23d6cc86,0x24070b07,0x243743fa,0x24677757,0x2497a517,0x24c7cd32,0x24f7efa1,
    0x25280c5d,0x2558235e,0x2588349c,0x25b84011,0x25e845b5,0x26184580,0x26483f6c,0x26783370,
    0x26a82185,0x26d809a4,0x2707ebc6,0x2737c7e3,0x27679df3,0x27976df0,0x27c737d2,0x27f6fb92,
    0x2826b927,0x2856708c,0x288621b8,0x28b5cca5,0x28e5714a,0x29150fa1,0x2944a7a1,0x29743945,
    0x29a3c484,0x29d34957,0x2a02c7b7,0x2a323f9d,0x2a61b101,0x2a911bdb,0x2ac08025,0x2aefddd7,
    0x2b1f34eb,0x2b4e8557,0x2b7dcf16,0x2bad1221,0x2bdc4e6e,0x2c0b83f9,0x2c3ab2b8,0x2c69daa6,
    0x2c98fbba,0x2cc815ed,0x2cf72939,0x2d263595,0x2d553afb,0x2d843963,0x2db330c6,0x2de2211d,
    0x2e110a61,0x2e3fec8a,0x2e6ec791,0x2e9d9b70,0x2ecc681d,0x2efb2d94,0x2f29ebcb,0x2f58a2bd,
    0x2f875261,0x2fb5fab1,0x2fe49ba6,0x30133538,0x3041c760,0x30705217,0x309ed555,0x30cd5114,
    0x30fbc54c,0x312a31f7,0x3158970d,0x3186f486,0x31b54a5d,0x31e39889,0x3211df03,0x32401dc5,
    0x326e54c7,0x329c8402,0x32caab6e,0x32f8cb06,0x3326e2c2,0x3354f29a,0x3382fa87,0x33b0fa83,
    0x33def286,0x340ce28a,0x343aca87,0x3468aa75,0x3496824f,0x34c4520c,0x34f219a7,0x351fd917,
    0x354d9056,0x357b3f5d,0x35a8e624,0x35d684a5,0x36041ad8,0x3631a8b7,0x365f2e3a,0x368cab5b,
    0x36ba2013,0x36e78c5a,0x3714f029,0x37424b7a,0x376f9e45,0x379ce884,0x37ca2a2f,0x37f76340,
    0x382493af,0x3851bb76,0x387eda8d,0x38abf0ee,0x38d8fe92,0x39060372,0x3932ff86,0x395ff2c8,
    0x398cdd31,0x39b9bebb,0x39e6975d,0x3a136711,0x3a402dd1,0x3a6ceb95,0x3a99a056,0x3ac64c0e,
    0x3af2eeb6,0x3b1f8847,0x3b4c18b9,0x3b78a006,0x3ba51e28,0x3bd19317,0x3bfdfecc,0x3c2a6141,
    0x3c56ba6f,0x3c830a4f,0x3caf50da,0x3cdb8e09,0x3d07c1d5,0x3d33ec38,0x3d600d2b,0x3d8c24a7,
    0x3db832a5,0x3de4371e,0x3e10320d,0x3e3c2368,0x3e680b2c,0x3e93e94f,0x3ebfbdcc,0x3eeb889b,
    0x3f1749b7,0x3f430118,0x3f6eaeb7,0x3f9a528f,0x3fc5ec97,0x3ff17cc9,0x401d0320,0x40487f93,
    0x4073f21c,0x409f5ab5,0x40cab957,0x40f60dfa,0x4121589a,0x414c992e,0x4177cfb0,0x41a2fc19,
    0x41ce1e64,0x41f93688,0x42244480,0x424f4844,0x427a41cf,0x42a5311a,0x42d0161d,0x42faf0d3,
    0x4325c134,0x4350873b,0x437b42e0,0x43a5f41d,0x43d09aec,0x43fb3745,0x4425c922,0x4450507d,
    0x447acd4f,0x44a53f92,0x44cfa73f,0x44fa044f,0x452456bc,0x454e9e7f,0x4578db92,0x45a30def,
    0x45cd358e,0x45f7526a,0x4621647c,0x464b6bbd,0x46756827,0x469f59b3,0x46c9405b,0x46f31c19,
    0x471cece6,0x4746b2bb,0x47706d92,0x479a1d66,0x47c3c22e,0x47ed5be5,0x4816ea85,0x48406e06,
    0x4869e664,0x48935396,0x48bcb598,0x48e60c61,0x490f57ed,0x49389835,0x4961cd32,0x498af6de,
    0x49b41532,0x49dd2829,0x4a062fbc,0x4a2f2be5,0x4a581c9c,0x4a8101dd,0x4aa9dba1,0x4ad2a9e1,
    0x4afb6c97,0x4b2423bd,0x4b4ccf4c,0x4b756f3f,0x4b9e038f,0x4bc68c35,0x4bef092c,0x4c177a6d,
    0x4c3fdff2,0x4c6839b5,0x4c9087b0,0x4cb8c9dc,0x4ce10033,0x4d092aaf,0x4d31494a,0x4d595bfd,
    0x4d8162c3,0x4da95d95,0x4dd14c6d,0x4df92f45,0x4e210616,0x4e48d0dc,0x4e708f8e,0x4e984228,
    0x4ebfe8a3,0x4ee782fa,0x4f0f1125,0x4f36931f,0x4f5e08e2,0x4f857268,0x4faccfaa,0x4fd420a3,
    0x4ffb654c,0x50229da0,0x5049c998,0x5070e92e,0x5097fc5d,0x50bf031e,0x50e5fd6c,0x510ceb3f,
    0x5133cc93,0x515aa161,0x518169a4,0x51a82554,0x51ced46d,0x51f576e9,0x521c0cc0,0x524295ef,
    0x5269126d,0x528f8237,0x52b5e544,0x52dc3b91,0x53028517,0x5328c1cf,0x534ef1b4,0x537514c1,
    0x539b2aee,0x53c13437,0x53e73096,0x540d2004,0x5433027c,0x5458d7f8,0x547ea072,0x54a45be5,
    0x54ca0a49,0x54efab9b,0x55153fd3,0x553ac6ed,0x556040e1,0x5585adab,0x55ab0d45,0x55d05fa9,
    0x55f5a4d1,0x561adcb8,0x56400757,0x566524a9,0x568a34a8,0x56af374f,0x56d42c98,0x56f9147d,
    0x571deef8,0x5742bc05,0x57677b9c,0x578c2db8,0x57b0d255,0x57d5696b,0x57f9f2f6,0x581e6ef0,
    0x5842dd53,0x58673e1a,0x588b913e,0x58afd6bb,0x58d40e8b,0x58f838a8,0x591c550d,0x594063b3,
    0x59646497,0x598857b1,0x59ac3cfc,0x59d01473,0x59f3de11,0x5a1799d0,0x5a3b47a9,0x5a5ee799,
    0x5a827999,0x5aa5fda3,0x5ac973b4,0x5aecdbc3,0x5b1035ce,0x5b3381cd,0x5b56bfbc,0x5b79ef95,
    0x5b9d1152,0x5bc024ef,0x5be32a66,0x5c0621b1,0x5c290acb,0x5c4be5af,0x5c6eb257,0x5c9170be,
    0x5cb420df,0x5cd6c2b3,0x5cf95637,0x5d1bdb64,0x5d3e5235,0x5d60baa6,0x5d8314b0,0x5da5604e,
    0x5dc79d7b,0x5de9cc32,0x5e0bec6d,0x5e2dfe28,0x5e50015c,0x5e71f605,0x5e93dc1e,0x5eb5b3a1,
    0x5ed77c88,0x5ef936d0,0x5f1ae272,0x5f3c7f6a,0x5f5e0db2,0x5f7f8d45,0x5fa0fe1e,0x5fc26037,
    0x5fe3b38c,0x6004f818,0x60262dd4,0x604754bd,0x60686cce,0x60897600,0x60aa704f,0x60cb5bb5,
    0x60ec382f,0x610d05b6,0x612dc445,0x614e73d9,0x616f146a,0x618fa5f6,0x61b02875,0x61d09be4,
    0x61f1003e,0x6211557d,0x62319b9c,0x6251d297,0x6271fa68,0x6292130b,0x62b21c7a,0x62d216b1,
    0x62f201ab,0x6311dd63,0x6331a9d3,0x635166f8,0x637114cb,0x6390b349,0x63b0426c,0x63cfc22f,
    0x63ef328e,0x640e9384,0x642de50c,0x644d2721,0x646c59be,0x648b7cdf,0x64aa907e,0x64c99497,
    0x64e88925,0x65076e23,0x6526438d,0x6545095e,0x6563bf91,0x65826621,0x65a0fd0a,0x65bf8446,
    0x65ddfbd2,0x65fc63a8,0x661abbc4,0x66390421,0x66573cba,0x6675658b,0x66937e8f,0x66b187c2,
    0x66cf811f,0x66ed6aa0,0x670b4442,0x67290e01,0x6746c7d6,0x676471bf,0x67820bb6,0x679f95b6,
    0x67bd0fbb,0x67da79c1,0x67f7d3c3,0x68151dbd,0x683257aa,0x684f8185,0x686c9b4a,0x6889a4f4,
    0x68a69e80,0x68c387e8,0x68e06128,0x68fd2a3c,0x6919e31f,0x69368bcd,0x69532441,0x696fac77,
    0x698c246b,0x69a88c18,0x69c4e379,0x69e12a8b,0x69fd6149,0x6a1987af,0x6a359db8,0x6a51a360,
    0x6a6d98a3,0x6a897d7c,0x6aa551e7,0x6ac115e0,0x6adcc963,0x6af86c6b,0x6b13fef4,0x6b2f80f9,
    0x6b4af277,0x6b665369,0x6b81a3cc,0x6b9ce39a,0x6bb812d0,0x6bd33169,0x6bee3f61,0x6c093cb5,
    0x6c24295f,0x6c3f055c,0x6c59d0a8,0x6c748b3e,0x6c8f351b,0x6ca9ce39,0x6cc45696,0x6cdece2d,
    0x6cf934fa,0x6d138af9,0x6d2dd026,0x6d48047d,0x6d6227f9,0x6d7c3a97,0x6d963c53,0x6db02d28,
    0x6dca0d13,0x6de3dc10,0x6dfd9a1a,0x6e17472e,0x6e30e348,0x6e4a6e64,0x6e63e87e,0x6e7d5192,
    0x6e96a99b,0x6eaff097,0x6ec92681,0x6ee24b56,0x6efb5f11,0x6f1461af,0x6f2d532b,0x6f463382,
    0x6f5f02b0,0x6f77c0b2,0x6f906d83,0x6fa90920,0x6fc19384,0x6fda0cac,0x6ff27495,0x700acb3a,
    0x70231098,0x703b44ab,0x70536770,0x706b78e2,0x708378fd,0x709b67bf,0x70b34523,0x70cb1126,
    0x70e2cbc5,0x70fa74fa,0x71120cc4,0x7129931d,0x71410803,0x71586b72,0x716fbd67,0x7186fddd,
    0x719e2cd1,0x71b54a3f,0x71cc5625,0x71e3507e,0x71fa3947,0x7211107c,0x7227d61b,0x723e8a1e,
    0x72552c83,0x726bbd47,0x72823c66,0x7298a9db,0x72af05a5,0x72c54fbf,0x72db8827,0x72f1aed7,
    0x7307c3cf,0x731dc708,0x7333b882,0x73499837,0x735f6625,0x73752248,0x738acc9d,0x73a06521,
    0x73b5ebd0,0x73cb60a6,0x73e0c3a2,0x73f614bf,0x740b53f9,0x7420814f,0x74359cbc,0x744aa63d,
    0x745f9dd0,0x74748370,0x7489571a,0x749e18cc,0x74b2c882,0x74c76639,0x74dbf1ee,0x74f06b9d,
    0x7504d344,0x751928df,0x752d6c6b,0x75419de5,0x7555bd4a,0x7569ca97,0x757dc5c9,0x7591aedc,
    0x75a585ce,0x75b94a9b,0x75ccfd41,0x75e09dbc,0x75f42c09,0x7607a826,0x761b1210,0x762e69c2,
    0x7641af3b,0x7654e278,0x76680375,0x767b122f,0x768e0ea4,0x76a0f8d1,0x76b3d0b2,0x76c69645,
    0x76d94987,0x76ebea76,0x76fe790d,0x7710f54b,0x77235f2c,0x7735b6ad,0x7747fbcd,0x775a2e87,
    0x776c4eda,0x777e5cc2,0x7790583c,0x77a24147,0x77b417de,0x77c5dc00,0x77d78da9,0x77e92cd7,
    0x77fab987,0x780c33b7,0x781d9b63,0x782ef08a,0x78403327,0x7851633a,0x786280be,0x78738bb2,
    0x78848412,0x789569dd,0x78a63d0f,0x78b6fda7,0x78c7aba0,0x78d846fa,0x78e8cfb0,0x78f945c2,
    0x7909a92b,0x7919f9ea,0x792a37fd,0x793a635f,0x794a7c10,0x795a820d,0x796a7553,0x797a55df,
    0x798a23b0,0x7999dec2,0x79a98714,0x79b91ca3,0x79c89f6c,0x79d80f6e,0x79e76ca5,0x79f6b710,
    0x7a05eeac,0x7a151376,0x7a24256d,0x7a33248e,0x7a4210d7,0x7a50ea45,0x7a5fb0d7,0x7a6e6489,
    0x7a7d055a,0x7a8b9347,0x7a9a0e4e,0x7aa8766d,0x7ab6cba2,0x7ac50dea,0x7ad33d44,0x7ae159ad,
    0x7aef6322,0x7afd59a2,0x7b0b3d2b,0x7b190dba,0x7b26cb4e,0x7b3475e3,0x7b420d79,0x7b4f920d,
    0x7b5d039c,0x7b6a6226,0x7b77ada7,0x7b84e61d,0x7b920b88,0x7b9f1de4,0x7bac1d30,0x7bb90969,
    0x7bc5e28e,0x7bd2a89d,0x7bdf5b93,0x7bebfb6f,0x7bf8882f,0x7c0501d0,0x7c116852,0x7c1dbbb1,
    0x7c29fbed,0x7c362903,0x7c4242f1,0x7c4e49b5,0x7c5a3d4e,0x7c661dba,0x7c71eaf7,0x7c7da503,
    0x7c894bdc,0x7c94df81,0x7ca05ff0,0x7cabcd26,0x7cb72723,0x7cc26de4,0x7ccda167,0x7cd8c1ac,
    0x7ce3ceb0,0x7ceec872,0x7cf9aeef,0x7d048226,0x7d0f4217,0x7d19eebd,0x7d248819,0x7d2f0e29,
    0x7d3980eb,0x7d43e05d,0x7d4e2c7d,0x7d58654b,0x7d628ac4,0x7d6c9ce8,0x7d769bb4,0x7d808726,
    0x7d8a5f3e,0x7d9423fa,0x7d9dd559,0x7da77358,0x7db0fdf6,0x7dba7533,0x7dc3d90c,0x7dcd2980,
    0x7dd6668d,0x7ddf9033,0x7de8a66f,0x7df1a941,0x7dfa98a6,0x7e03749e,0x7e0c3d28,0x7e14f241,
    0x7e1d93e8,0x7e26221d,0x7e2e9cde,0x7e370429,0x7e3f57fd,0x7e47985a,0x7e4fc53d,0x7e57dea5,
    0x7e5fe492,0x7e67d701,0x7e6fb5f2,0x7e778164,0x7e7f3955,0x7e86ddc4,0x7e8e6eb0,0x7e95ec18,
    0x7e9d55fb,0x7ea4ac57,0x7eabef2b,0x7eb31e76,0x7eba3a38,0x7ec1426e,0x7ec83719,0x7ecf1836,
    0x7ed5e5c5,0x7edc9fc5,0x7ee34634,0x7ee9d912,0x7ef0585e,0x7ef6c417,0x7efd1c3b,0x7f0360c9,
    0x7f0991c2,0x7f0faf23,0x7f15b8ec,0x7f1baf1c,0x7f2191b2,0x7f2760ae,0x7f2d1c0d,0x7f32c3cf,
    0x7f3857f4,0x7f3dd87b,0x7f434562,0x7f489ea9,0x7f4de44f,0x7f531653,0x7f5834b5,0x7f5d3f74,
    0x7f62368e,0x7f671a03,0x7f6be9d3,0x7f70a5fc,0x7f754e7e,0x7f79e359,0x7f7e648a,0x7f82d213,
    0x7f872bf1,0x7f8b7225,0x7f8fa4ae,0x7f93c38b,0x7f97cebb,0x7f9bc63e,0x7f9faa14,0x7fa37a3b,
    0x7fa736b3,0x7faadf7b,0x7fae7493,0x7fb1f5fb,0x7fb563b1,0x7fb8bdb6,0x7fbc0409,0x7fbf36a8,
    0x7fc25595,0x7fc560cd,0x7fc85852,0x7fcb3c22,0x7fce0c3d,0x7fd0c8a2,0x7fd37151,0x7fd6064a,
    0x7fd8878c,0x7fdaf517,0x7fdd4eeb,0x7fdf9507,0x7fe1c76a,0x7fe3e615,0x7fe5f107,0x7fe7e83f,
    0x7fe9cbbe,0x7feb9b84,0x7fed578f,0x7feeffe0,0x7ff09476,0x7ff21552,0x7ff38272,0x7ff4dbd7,
    0x7ff62181,0x7ff7536e,0x7ff871a0,0x7ff97c16,0x7ffa72d0,0x7ffb55cd,0x7ffc250e,0x7ffce092,
    0x7ffd8859,0x7ffe1c63,0x7ffe9cb1,0x7fff0941,0x7fff6215,0x7fffa72b,0x7fffd884,0x7ffff620,
    0x7fffffff
};

/*
A helper to generate the table of values for the sine function
It prints working C code that you can paste to the project later
*/
void printSinTable(int64_t tableSize) {
    int i;
    printf("static int32_t sin90[TABLE_SIZE+1] = {\n  ");
    for(i=0; i < tableSize; i++) {
        printf("0x%04x%s", (int32_t) (sin((M_PI/2.0) / tableSize * i) / Q15), (i%8!=7) ? "," : ",\n  ");
    }
    printf("0x7fffffff\n};\n");
}


static inline int32_t fastSinInt(int32_t angle) {
    int32_t v0, v1;

    if(angle < 0) angle += INT32_OVERFLOW;

    v0 = (angle >> INTERP_BITS);
    if(v0 & FLIP_BIT) { 
        v0 = ~v0;
        v1 = ~angle;
    } else {
        v1 = angle;
    }
    v0 &= TABLE_MASK;
    v1 = sin90[v0] + (int32_t) (((int64_t) (sin90[v0+1]-sin90[v0]) * (v1 & INTERP_MASK)) >> INTERP_BITS);
    
    return (angle >> INTERP_BITS) & NEGATE_BIT ? -v1 : v1;
}

/*
@param angle - degrees value [-360, 360]
*/
double mSin(double angle) {
    return fastSinInt(angle * INT32_OVERFLOW / 360.0) * Q15;
}

/*
@param angle - degrees value [-360, 360]
*/
double mCos(double _angle)
{
    int32_t angle = _angle * INT32_OVERFLOW / 360.0;
    if(angle < 0) angle += INT32_OVERFLOW;
    return fastSinInt(angle - (int32_t)(((int64_t)INT32_MAX * 270) / 360)) * Q15;
}
